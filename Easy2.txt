#include <vector>
#include <iostream>

// Definition for a binary tree node.
struct TreeNode {
    int val;
    TreeNode* left;
    TreeNode* right;
    TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
};

class Solution {
public:
    TreeNode* sortedArrayToBST(std::vector<int>& nums) {
        if (nums.empty()) {
            return nullptr;
        }

        int mid = nums.size() / 2;
        TreeNode* root = new TreeNode(nums[mid]);

        // Recursively build the left and right subtrees
        std::vector<int> left(nums.begin(), nums.begin() + mid);
        std::vector<int> right(nums.begin() + mid + 1, nums.end());

        root->left = sortedArrayToBST(left);
        root->right = sortedArrayToBST(right);

        return root;
    }
};

// Helper function to print the tree (in-order traversal)
void printTree(TreeNode* root) {
    if (root) {
        printTree(root->left);
        std::cout << root->val << " ";
        printTree(root->right);
    }
}

int main() {
    // Example usage:
    std::vector<int> nums1 = {-10, -3, 0, 5, 9};
    Solution solution1;
    TreeNode* result1 = solution1.sortedArrayToBST(nums1);
    printTree(result1);  // Output: -10 -3 0 5 9

    std::vector<int> nums2 = {1, 3};
    Solution solution2;
    TreeNode* result2 = solution2.sortedArrayToBST(nums2);
    printTree(result2);  // Output: 1 3

    return 0;
}
